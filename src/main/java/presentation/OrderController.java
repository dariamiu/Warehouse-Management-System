package presentation;

import businessLogic.*;
import com.sun.jdi.IntegerValue;
import model.Order;
import model.OrderProduct;
import model.Product;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Class to control the OrderView interface
 * @author Daria Miu
 */
public class OrderController {

    private OrderView orderView;
    private OrderBLL orderBLL;
    private OrderValidator orderValidator;
    private ProductBLL productBLL;
    private Order order;
    private CustomerBLL customerBLL;
    private OrderProductBLL orderProductBLL;
    private ProductValidator productValidator;
    private int idCurrentOrder;
    private int billNumber;
    private FileWriter fw;
    private FileWriter fw2;
    private FileReader fr2;

    public OrderController(){
        orderBLL = new OrderBLL();
        orderValidator = new OrderValidator();
        orderView = new OrderView();
        productBLL = new ProductBLL();
        initializeActionListeners();
        customerBLL = new CustomerBLL();
        productValidator = new ProductValidator();
        orderProductBLL = new OrderProductBLL();
        this.billNumber = 4;

    }
    /**
     * Method to initialize all the action listeners for the buttons from the CustomerView.
     * Method retrieves the data from the text fields and JComboBoxes in the interface and sends the data to the BLL to be processed.
     */
    private void initializeActionListeners(){
        orderView.viewAllActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orderView.setOrders(orderBLL.findAll());
                System.out.println(orderBLL.findAll().get(0).getTotalPrice());
            }
        });
        orderView.searchActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Order> order =  new ArrayList<>();
                try {
                    int id = orderValidator.validateId(orderView.getSearchText());
                    order.add(orderBLL.findById(id));
                    orderView.setOrders(order);
                }catch (RuntimeException exception){
                    orderView.displayErrorMessage(exception);
                }

            }
        });
        /**
         *  create the order with the autogenerated id and customer id
         *  set the total amount to 0 and the status to processing
         */
        orderView.okActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int idCustomer;
                float total = 0;
                order = new Order();
                try{
                    orderValidator.validateCreate(orderView.getIdCustomerText(), orderView.getSelectedName());
                    if(!orderView.getIdCustomerText().isBlank()){
                        int id = orderValidator.validateId(orderView.getIdCustomerText());
                        idCustomer = id;
                    }else{
                        idCustomer = customerBLL.findIdByName(orderView.getSelectedName());
                    }
                    order.setId_customer(idCustomer);
                    order.setTotalPrice(total);
                    order.setOrder_status("processing");
                    orderBLL.insert(order);
                    idCurrentOrder = orderBLL.findAll().get(orderBLL.findAll().size() - 1).getId_order();
                    order.setId_order(idCurrentOrder);
                    System.out.println(idCurrentOrder);
                }catch (Exception exception){
                    orderView.displayErrorMessage(exception);
                }
            }
        });
        /**
         * sets the products int the comboBox
         */
        orderView.viewProductsActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orderView.setComboBoxProducts(productBLL.findAll());
            }
        });
        /**
         * sets the customers in the comboBox
         */
        orderView.viewCustomersActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orderView.setComboBoxCustomers(customerBLL.findAll());
            }
        });

        /**
         * adds products to order 1 by 1
         * if product already exists on order the quantity will be updated if it is changed
         * otherwise the entry remains the same
         * if the old quantity is greater than the new quantity the stock needs to be incremented
         * with the difference old - new
         * else if new quantity is greater than the old quantity the stock has to be decremented
         * with the difference new - old
         */
        orderView.addToOrderActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                OrderProduct orderProduct = new OrderProduct();
                OrderProduct orderProduct2 = new OrderProduct();
                try{
                    int quantity = orderValidator.validateId(orderView.getQuantityText());;
                    int id = productBLL.findIdByName(orderView.getSelectedProduct());
                    int stock = productBLL.findStockById(id);

                    System.out.println(idCurrentOrder);
                    orderProduct.setId_order(idCurrentOrder);
                    orderProduct.setId_product(id);
                    orderProduct2 = orderProductBLL.findByOrderIdAndProductId(idCurrentOrder,id);
                    Product product = new Product();
                    product = productBLL.findById(id);

                    if(orderProduct2 != null){
                        stock += orderProduct2.getQuantity();
                        productValidator.stockValidator(stock,quantity);
                        if(orderProduct2.getQuantity() > quantity){
                            product.setStock(product.getStock()+(orderProduct2.getQuantity() - quantity));
                        }else if(orderProduct2.getQuantity() < quantity){
                            product.setStock(product.getStock()-(quantity-orderProduct2.getQuantity()));
                        }
                        orderProduct.setQuantity(quantity);
                        orderProductBLL.update(orderProduct);

                    }else{
                        productValidator.stockValidator(stock,quantity);
                        orderProduct.setQuantity(quantity);
                        orderProductBLL.insert(orderProduct);
                    }

                    productBLL.update(product);


                }catch (Exception exception){
                    orderView.displayErrorMessage(exception);
                }

            }
        });
        /**
         * generates the bill by iterating through the orders products and displaying the details of those
         * whose quantity > 0
         * the supplimentarry spaces are added for a more pleasant view of the bill
         */
        orderView.finalizeOrderActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                float total =0;
                StringBuilder bill = new StringBuilder();
                bill.append("Order : " +idCurrentOrder+"\nCustomer : " );
                bill.append(customerBLL.findById(orderBLL.findById(idCurrentOrder).getId_customer()).getName()+"\n");
                bill.append("Products:                Quantity:  Price:  Total:\n");
                List<OrderProduct> products = orderProductBLL.findByOrderId(idCurrentOrder);
                for(OrderProduct orderProduct : products){
                    float price = productBLL.findById(orderProduct.getId_product()).getUnit_price();
                    int quantity =orderProduct.getQuantity();
                    if(quantity != 0){
                        String name = productBLL.findNameById(orderProduct.getId_product());
                        bill.append(name);
                        for(int i = 1; i<= 25-name.length();i++) bill.append(" ");
                        bill.append(quantity);
                        bill.append("          ");
                        bill.append(price);
                        bill.append("     ");
                        bill.append(price*quantity);
                        bill.append("\n");
                        total = total + price*quantity;
                    }

                }
                order.setTotalPrice(total);
                orderBLL.update(order);
                bill.append("Total:\n");
                bill.append(orderBLL.findById(idCurrentOrder).getTotalPrice());
                System.out.println(bill.toString());
                try {
                    billNumber++;
                    fw = new FileWriter(createFile());
                    fw.write(bill.toString());
                    fw.close();
                    orderView.displayInformationMessage("Bill was generated! :)");
                } catch (IOException exception) {
                    exception.printStackTrace();
                }
            }
        });
        orderView.deleteButtonActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int id = orderValidator.validateId(orderView.getIdOrder());
                    Order orderDelete = new Order();
                    orderDelete.setId_order(id);
                    orderBLL.delete(orderDelete);
                    orderView.displayInformationMessage("Order was deleted");
                }catch (Exception exception){
                    orderView.displayErrorMessage(exception);
                }

            }
        });
        orderView.modifyStatusButtonActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    int id = orderValidator.validateId(orderView.getIdOrder2());
                    Order orderUpdate = new Order();
                    orderUpdate = orderBLL.findById(id);
                    orderUpdate.setOrder_status(orderView.getSelectedStatus());
                    orderBLL.update(orderUpdate);
                    orderView.displayInformationMessage("Order was updated");

                }catch (Exception exception){
                    orderView.displayErrorMessage(exception);
                }
            }
        });
    }

    /**
     * Method creates a new file in the current folder for each generated bill
     * @return name of the file
     */
    private String createFile(){
        StringBuilder fileName = new StringBuilder();
        fileName.append("./bill");
        fileName.append(order.getId_order() + "_");
        fileName.append(order.getId_customer());
        fileName.append(".txt");
        File file = new File(fileName.toString());
        boolean result;
        try
        {
            result = file.createNewFile();
            if(result)
            {
                System.out.println("file created "+file.getCanonicalPath());
            }
            else
            {
                System.out.println("File already exist at location: "+file.getCanonicalPath());
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        return fileName.toString();
    }
}

